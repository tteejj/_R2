# Text Resource Management Module
# Provides centralized text/string management for internationalization

# Script-level variable to store all text resources
$script:TextResources = @{
    # Dashboard screen specific
    Dashboard = @{
        Title = "PMC Terminal v5 - Dashboard"
        Welcome = "Welcome to PMC Terminal"
        QuickActions = "Quick Actions"
        ActiveTimers = "Active Timers"
        TodaysTasks = "Today's Tasks"
        Stats = "Statistics"
        NoTimersActive = "No active timers"
        NoTasksToday = "No tasks for today"
    }
    
    # Task screen specific
    Tasks = @{
        Title = "Task Management"
        AddTask = "Add Task"
        EditTask = "Edit Task"
        DeleteConfirm = "Are you sure you want to delete this task?"
        FilterAll = "All"
        FilterActive = "Active"
        FilterCompleted = "Completed"
        SortByPriority = "Priority"
        SortByDueDate = "Due Date"
        SortByCreated = "Created"
    }
    
    # Timer screen specific
    Timer = @{
        Title = "Timer Management"
        StartTimer = "Start Timer"
        StopTimer = "Stop Timer"
        PauseTimer = "Pause Timer"
        ResumeTimer = "Resume Timer"
        TimerRunning = "Timer Running"
        TimerPaused = "Timer Paused"
        TimerStopped = "Timer Stopped"
        ElapsedTime = "Elapsed Time"
    }
    
    # Settings screen specific
    Settings = @{
        Title = "Settings"
        General = "General Settings"
        Appearance = "Appearance"
        Behavior = "Behavior"
        DataSettings = "Data Settings"
        ImportData = "Import Data"
        ExportData = "Export Data"
        ResetSettings = "Reset to Defaults"
    }
    
    # Common UI elements
    Common = @{
        Save = "Save"
        Cancel = "Cancel"
        Delete = "Delete"
        Edit = "Edit"
        Add = "Add"
        Remove = "Remove"
        Close = "Close"
        Back = "Back"
        Next = "Next"
        Previous = "Previous"
        Yes = "Yes"
        No = "No"
        OK = "OK"
        Error = "Error"
        Warning = "Warning"
        Info = "Info"
        Success = "Success"
    }
    
    # Error messages
    Errors = @{
        FileNotFound = "File not found: {0}"
        AccessDenied = "Access denied to file: {0}"
        InvalidData = "Invalid data format"
        NetworkError = "Network connection error"
        DatabaseError = "Database operation failed"
        UnexpectedError = "An unexpected error occurred"
    }
}

function global:Get-Text {
    <#
    .SYNOPSIS
    Gets a text resource by key path
    
    .PARAMETER Key
    Dot-separated path to the text resource (e.g., "Dashboard.Welcome")
    
    .PARAMETER Format
    Optional format arguments for string formatting
    
    .EXAMPLE
    Get-Text "Dashboard.Welcome"
    
    .EXAMPLE
    Get-Text "Errors.FileNotFound" "myfile.txt"
    #>
    param(
        [Parameter(Mandatory=$true)]
        [string]$Key,
        
        [Parameter(ValueFromRemainingArguments=$true)]
        [object[]]$Format
    )
    Invoke-WithErrorHandling -Component "TextResources.GetText" -Context "GetText" -ScriptBlock {
        # Navigate the nested hashtable
        $parts = $Key -split '\.'
        $current = $script:TextResources
        
        foreach ($part in $parts) {
            if ($current -is [hashtable] -and $current.ContainsKey($part)) {
                $current = $current[$part]
            } else {
                Write-Warning "Text resource not found: '$Key'"
                return $Key  # Return the key as fallback
            }
        }
        
        # Format the string if arguments provided
        if ($Format -and $Format.Count -gt 0) {
            try {
                return $current -f $Format
            } catch {
                Write-Warning "Failed to format text resource '$Key': $_"
                return $current
            }
        }
        
        return $current
    } -AdditionalData @{ Key = $Key; FormatArgs = $Format }
}

function global:Set-TextResource {
    <#
    .SYNOPSIS
    Sets or updates a text resource
    
    .PARAMETER Key
    Dot-separated path to the text resource
    
    .PARAMETER Value
    The text value to set
    
    .EXAMPLE
    Set-TextResource "Custom.WelcomeMessage" "Welcome to my app!"
    #>
    param(
        [Parameter(Mandatory=$true)]
        [string]$Key,
        
        [Parameter(Mandatory=$true)]
        [string]$Value
    )
    Invoke-WithErrorHandling -Component "TextResources.SetTextResource" -Context "SetTextResource" -ScriptBlock {
        $parts = $Key -split '\.'
        $current = $script:TextResources
        
        # Navigate to the parent container
        for ($i = 0; $i -lt ($parts.Count - 1); $i++) {
            $part = $parts[$i]
            if (-not $current.ContainsKey($part)) {
                $current[$part] = @{}
            }
            $current = $current[$part]
        }
        
        # Set the final value
        $current[$parts[-1]] = $Value
        Write-Verbose "Set text resource '$Key' to '$Value'"
    } -AdditionalData @{ Key = $Key; Value = $Value }
}

function global:Get-TextResources {
    <#
    .SYNOPSIS
    Gets all text resources (useful for export/import)
    #>
    Invoke-WithErrorHandling -Component "TextResources.GetTextResources" -Context "GetAllResources" -ScriptBlock {
        return $script:TextResources.Clone()
    }
}

function global:Import-TextResources {
    <#
    .SYNOPSIS
    Imports text resources from a file
    
    .PARAMETER Path
    Path to JSON file containing text resources
    #>
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path
    )
    Invoke-WithErrorHandling -Component "TextResources.ImportTextResources" -Context "ImportTextResources" -ScriptBlock {
        if (Test-Path $Path) {
            try {
                $imported = Get-Content $Path -Raw | ConvertFrom-Json -AsHashtable
                $script:TextResources = $imported
                Write-Host "Text resources imported successfully"
            } catch {
                Write-Log -Level Error -Message "Failed to import text resources from '$Path': $_" -Data @{ FilePath = $Path; Exception = $_ }
            }
        } else {
            Write-Log -Level Error -Message "File not found: $Path" -Data @{ FilePath = $Path }
        }
    } -AdditionalData @{ FilePath = $Path }
}

function global:Export-TextResources {
    <#
    .SYNOPSIS
    Exports text resources to a file
    
    .PARAMETER Path
    Path to save the JSON file
    #>
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path
    )
    Invoke-WithErrorHandling -Component "TextResources.ExportTextResources" -Context "ExportTextResources" -ScriptBlock {
        try {
            $script:TextResources | ConvertTo-Json -Depth 10 | Set-Content $Path
            Write-Host "Text resources exported successfully"
        } catch {
            Write-Log -Level Error -Message "Failed to export text resources to '$Path': $_" -Data @{ FilePath = $Path; Exception = $_ }
        }
    } -AdditionalData @{ FilePath = $Path }
}

# Export functions
Export-ModuleMember -Function @(
    'Get-Text',
    'Set-TextResource',
    'Get-TextResources',
    'Import-TextResources',
    'Export-TextResources'
)
