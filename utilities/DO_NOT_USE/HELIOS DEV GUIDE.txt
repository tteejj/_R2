Of course. Here is a detailed critique of the provided guide followed by a complete, updated version designed to effectively orient a developer (or an AI) to the application's architecture.

---

### Critique of the Provided Guide

The attached guide is an excellent starting point and correctly identifies many core concepts. However, it can be improved to be more direct, prescriptive, and clearer for a developer or AI that needs to generate code that conforms to the "Helios" architecture.

**Strengths:**

*   **Identifies Core Principles:** It correctly singles out SOA, Centralized State, Declarative UI, and Events as the core philosophy.
*   **Explains Data Flow:** The unidirectional data flow is explained, which is the most critical concept.
*   **Highlights Key Services:** It gives prominence to the `AppStore`, `Navigation`, and `Keybinding` services.
*   **Good Walkthrough:** The step-by-step guide for creating a new screen is a strong, practical example.

**Areas for Improvement:**

1.  **Clarity on UI Hierarchy and Rendering:** The guide mentions the `Children` array but doesn't explicitly state the "Golden Rule": **The engine renders the `Children` array; the screen's `Render` method is ONLY for non-component chrome.** This is a frequent point of confusion and leads to rendering bugs. The updated guide must make this an unmistakable rule.
2.  **Prescriptiveness:** The tone can be more directive. For an AI or a new developer, ambiguity is the enemy. The guide should use stronger, rule-based language like "You MUST...", "NEVER...", "The ONLY way to...".
3.  **Role of `All.txt`:** The guide mentions that action handlers are in `All.txt`, but it should clarify that this file acts as the application's central "composition root" where all modules, services, routes, and state actions are wired together.
4.  **Deprecation of Old Patterns:** It should explicitly state what *not* to do. For example, it should clearly state: "Do not use `New-TuiTable`; use `New-TuiDataTable` instead" or "Do not manually calculate X/Y coordinates; use layout panels."
5.  **Focus Management:** The guide mentions the Focus Manager but could be more explicit about its role in tab order and programmatic focus setting with `Request-Focus`.
6.  **Component Interaction:** It could better explain how components communicateâ€”primarily by dispatching actions that change a shared state that another component is subscribed to, rather than by direct method calls.

The following updated guide addresses these points to provide a more robust and unambiguous set of "guide rails."

---

## PMC Terminal v4.2 "Helios" - The Definitive Developer & AI Guide

### 1. The Core Philosophy & The Golden Rules

**PMC Terminal** is a modular PowerShell TUI application. To contribute, you MUST understand and adhere to its service-oriented architecture.

**The Golden Rules:**

1.  **STATE IS CENTRALIZED:** All shared data that affects the UI or application logic MUST live in the `AppStore`. The UI is a reflection of this state.
2.  **DATA FLOW IS ONE-WAY:** The only way to change the state is to `Dispatch` an `Action` to the `AppStore`.
3.  **UI IS DECLARATIVE:** Layouts MUST be built using the layout panels from `layout/panels.psm1` (`StackPanel`, `GridPanel`). You must NEVER manually calculate `X`/`Y` coordinates for components within a layout.
4.  **NAVIGATION IS ROUTED:** All screen transitions MUST go through the `NavigationService`. You must NEVER call `Push-Screen` or `Pop-Screen` directly.
5.  **COMPONENTS ARE RENDERED BY THE ENGINE:** The TUI engine automatically renders all components found in a screen's `Children` array. A screen's `Render` method is ONLY for drawing non-component "chrome" like status bars.

Breaking these rules will break the application's architecture.

### 2. The Architecture: A Deep Dive

#### 2.1. The Unidirectional Data Flow

This is the most important concept. Memorize this sequence:

1.  **UI Event:** A user interacts with a component (e.g., clicks a `New-TuiButton`).
2.  **Dispatch Action:** The component's `OnClick` handler calls `& $services.Store.Dispatch -actionName "MY_ACTION_NAME" -payload @{...}`.
3.  **Action Logic Executes:** The `AppStore` finds the scriptblock registered to `"MY_ACTION_NAME"`. This is where all business logic lives (e.g., creating a new object, calling an API).
4.  **State is Mutated:** The action logic calls `$Context.UpdateState(@{ pieceOfState = $newValue })`. This is the **ONLY** place state is changed.
5.  **Subscribers are Notified:** The `AppStore` sees that `pieceOfState` has changed and notifies everything that is subscribed to it.
6.  **UI Reacts & Re-renders:** A component subscribed to `pieceOfState` receives the `$newValue`, updates its own properties (e.g., `$component.Data = $newValue`), and the TUI engine automatically redraws it on the next frame.

#### 2.2. The Composition Root: `Start-PMCTerminal.ps1`

This file is the "main" function of the application. It is responsible for:
1.  Defining the list of all modules to load (`$script:ModulesToLoad`) and screens (`$script:ScreenModules`).
2.  Initializing all core services (`Initialize-PMCServices`).
3.  **Registering all `AppStore` actions and their handler scriptblocks.** This is where you will add the logic for any new features.
4.  Registering all navigation routes.
5.  Starting the main TUI loop.

#### 2.3. Key Services (`$global:Services`)

These are initialized once in `Start-PMCTerminal.ps1` and injected into screens via their `Init` method.

*   **`$services.Store` (`app-store.psm1`):** The state manager.
    *   `.Dispatch(actionName, payload)`: Your primary interaction point.
    *   `.RegisterAction(actionName, scriptBlock)`: Defines the logic for an action.
    *   `.Subscribe(path, handler)`: How UI components listen for state changes.
    *   `.Unsubscribe(subscriptionId)`: Used for cleanup in a screen's `OnExit`.
*   **`$services.Navigation` (`navigation.psm1`):** The screen router.
    *   `.GoTo(path, services)`: The **only** correct way to change screens.
    *   `.Back()`: The correct way to go back.
*   **`$services.Keybindings` (`keybindings.psm1`):** The input mapper. Avoid hardcoding key checks; define a logical action here and check for it in `HandleInput`.

### 3. Building UIs: The Correct Way

The UI has a strict hierarchy: **Screen -> Layout Panel -> Component**.

#### 3.1. Screens (`/screens/*.psm1`)

A screen is a top-level container created by a factory function (e.g., `Get-DashboardScreen`).

*   **`Children = @()`:** This array is **MANDATORY**. All top-level layout panels for your screen **MUST** be added to this array. The engine will not see or render them otherwise.
*   **`Init($self, $services)`:** Called once. Build your entire UI here. Create panels, create components, add components to panels, and add panels to `$self.Children`. Also, set up all your state subscriptions here.
*   **`Render($self)`:** Use this **ONLY** for drawing things that are not components, like a status bar at the bottom of the screen.
*   **`OnExit($self)`:** **MANDATORY** for any screen with subscriptions. You must loop through `$self._subscriptions` and call `.Unsubscribe()` for each one to prevent memory leaks.

#### 3.2. Layout Panels (`/layout/panels.psm1`)

These are the foundation of all modern UI in Helios. **DO NOT MANUALLY SET COMPONENT COORDINATES.**

*   **`New-TuiStackPanel`**: For simple vertical or horizontal lists of components.
*   **`New-TuiGridPanel`**: For complex, two-dimensional layouts. Define rows and columns with `RowDefinitions` and `ColumnDefinitions` (e.g., `@("1*", "5", "2*")` means one flexible-size row, one 5-cell fixed row, and one double-weighted flexible row).

**Usage Example:**
```powershell
# In a screen's Init method:
# 1. Create the panel
$panel = New-TuiGridPanel -Props @{ X=1; Y=1; Width=80; Height=25; RowDefinitions=@("3", "1*") }

# 2. Add the panel to the screen's Children to make it renderable
$self.Children += $panel

# 3. Create a component
$button = New-TuiButton -Props @{ Text="Click Me" }

# 4. Add the component to the panel, specifying its grid position
& $panel.AddChild -self $panel -Child $button -LayoutProps @{ "Grid.Row" = 0; "Grid.Column" = 0 }
```

#### 3.3. Components (`/components/*.psm1`)

These are the widgets of the application.

*   **`New-TuiDataTable`:** This is the preferred component for displaying any list of data. It is powerful and standardized. **Use this instead of the older `New-TuiTable`.** Its `Data` property should be connected to an array in the `AppStore` via a subscription.
*   **Event Handlers (`OnClick`, `OnRowSelect`):** These handlers should be simple. Their only job is typically to `Dispatch` an action to the `AppStore`. All complex logic belongs in the action handler itself.

### 4. Foundational Systems

You will use functions from these modules, but will rarely modify them.

*   **TUI Engine (`tui-engine-v2.psm1`):**
    *   `Request-TuiRefresh()`: Call this after you've changed a component's visual property (like `$label.Text`) to tell the engine to redraw the screen.
*   **Focus Manager (`utilities/focus-manager.psm1`):**
    *   `Request-Focus -Component $myComponent`: Use this to programmatically set focus. Essential for good UX, like focusing the first input field when a form dialog opens.
*   **Dialog System (`dialog-system.psm1`):**
    *   Provides standardized dialogs like `Show-ConfirmDialog`, `Show-AlertDialog`, and `Show-InputDialog`. Use these instead of creating your own popups.

### 5. Walkthrough: Adding a "Settings" Value

This demonstrates the full, end-to-end data flow for a simple feature.

**Goal:** Add a setting to the Settings screen to change the theme and have it persist.

1.  **Register State and Actions (`Start-PMCTerminal.ps1`)**
    *   First, ensure the state exists. In `Initialize-DataManager`, we see `Settings = @{ Theme = "Modern" }`. Perfect.
    *   In `Initialize-PMCServices`, add a new action handler to the `AppStore`:
        ```powershell
        & $services.Store.RegisterAction -self $services.Store -actionName "SETTINGS_UPDATE_THEME" -scriptBlock {
            param($Context, $Payload)
            
            # Logic: Update the theme in the global data object
            if ($global:Data.Settings) {
                $global:Data.Settings.Theme = $Payload.ThemeName
            }
            
            # Logic: Tell the ThemeManager to apply the change immediately
            Set-TuiTheme -ThemeName $Payload.ThemeName
            
            # Logic: Persist the change
            Save-UnifiedData
            
            # Optional: Update the store if other components need to react
            $Context.UpdateState(@{ "settings.theme" = $Payload.ThemeName })
        }
        ```

2.  **Modify the UI (`screens/settings-screen.psm1`)**
    *   We need a dropdown to select a theme. We'll assume the Settings screen's `Init` method is being modified.
    ```powershell
    # In the Init method of the settings screen...

    # Get available themes from the Theme Manager
    $availableThemes = Get-AvailableThemes | ForEach-Object { @{ Display = $_; Value = $_ } }
    
    # Get the current theme from the store to set the dropdown's initial value
    $currentTheme = & $services.Store.GetState -self $services.Store -path "settings.theme"

    # Create the dropdown component
    $themeDropdown = New-TuiDropdown -Props @{
        Name = "themeDropdown"
        IsFocusable = $true
        Options = $availableThemes
        Value = $currentTheme
        OnChange = {
            param($NewValue)
            # When the dropdown value changes, dispatch the action.
            & $services.Store.Dispatch -self $services.Store -actionName "SETTINGS_UPDATE_THEME" -payload @{ ThemeName = $NewValue }
        }
    }

    # Add a label and the dropdown to a layout panel
    $panel.AddChild($themeLabel)
    $panel.AddChild($themeDropdown) # Assuming a layout panel named $panel exists
    ```

3.  **Add Subscription (If Needed)**
    *   If some other part of the Settings screen needed to display the current theme name, we would add a subscription.
    ```powershell
    # In the Init method of the settings screen...
    $self._subscriptions += & $services.Store.Subscribe -self $services.Store -path "settings.theme" -handler {
        param($data)
        # Update the dropdown's value if the state changes from another source
        $self._themeDropdown.Value = $data.NewValue
        Request-TuiRefresh
    }
    ```

4.  **Add Cleanup (`screens/settings-screen.psm1`)**
    *   Ensure the `OnExit` method is present and cleans up the subscription.
    ```powershell
    # In the settings screen definition...
    OnExit = {
        param($self)
        foreach ($subId in $self._subscriptions) {
            & $self._services.Store.Unsubscribe -self $self._services.Store -subId $subId
        }
    }
    ```

This example perfectly illustrates the entire loop: The UI (`New-TuiDropdown`) dispatches an action. The action handler contains all the logic (updating `$global:Data`, calling `Set-TuiTheme`, saving). A subscription then updates the UI if the state changes.